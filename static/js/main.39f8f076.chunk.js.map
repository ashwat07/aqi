{"version":3,"sources":["view/header/header.js","config/range.js","component/card/card.js","config/data.js","hooks/useForceRender.js","component/aqitable/aqitable.js","component/chart/chart.js","config/constants.js","view/main/main.js","App.js","index.js"],"names":["Header","className","src","process","alt","range","num","AQICard","props","city","aqi","updatedAt","classes","push","join","Number","toFixed","Data","this","data","singleCityData","item","update","moment","fromNow","useForceUpdate","useState","setValue","value","columns","title","dataIndex","key","render","text","sorter","a","b","children","AqiTable","modifiedData","tableData","map","index","dataSource","pagination","AQILineChart","cityName","LineChart","width","height","Line","type","dataKey","stroke","CartesianGrid","XAxis","YAxis","constants","WS_URL","Main","isConnected","setIsConnected","setTableData","setCityName","forceUpdate","useEffect","ws","WebSocket","onopen","onmessage","evt","msg","JSON","parse","forEach","message","pushItem","pushCityData","onclose","Object","values","getData","onClick","some","handleCardClick","getCityData","size","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39f8f076.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__logo\">\r\n        <figure>\r\n          <img src={`${process.env.PUBLIC_URL}/aqi-icon.png`} alt=\"logo\" />\r\n          <figcaption>Air Quality Index of Indian Cities</figcaption>\r\n        </figure>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","const range = (num) => {\r\n  num = +num;\r\n  if (num > 400 && num <= 500) {\r\n    return \"card__severe\";\r\n  } else if (num > 300 && num <= 400) {\r\n    return \"card__vpoor\";\r\n  } else if (num > 200 && num <= 300) {\r\n    return \"card__poor\";\r\n  } else if (num > 100 && num <= 200) {\r\n    return \"card__moderate\";\r\n  } else if (num > 50 && num <= 100) {\r\n    return \"card__satisfactory\";\r\n  } else if (num <= 50) {\r\n    return \"card__good\";\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport default range;\r\n","import React from \"react\";\r\nimport { Card } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport range from \"../../config/range\";\r\nimport \"./card.css\";\r\n\r\nfunction AQICard(props) {\r\n  const { city, aqi, updatedAt } = props;\r\n\r\n  const classes = [\"card\"];\r\n  classes.push(range(aqi));\r\n\r\n  return (\r\n    <Card className={classes.join(\" \")}>\r\n      <div className=\"card__title\">\r\n        <i className=\"fas fa-map-marker-alt\"></i>\r\n        <p>{city}</p>\r\n      </div>\r\n      <div className=\"card__aqi\">\r\n        <p>{Number(aqi).toFixed(2)}</p>\r\n      </div>\r\n      <div className=\"card__time\">\r\n        <p>Updated:</p>\r\n        <p>{updatedAt}</p>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nAQICard.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  aqi: PropTypes.number.isRequired,\r\n  updatedAt: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AQICard;\r\n","import moment from \"moment\";\r\n\r\nclass Data {\r\n  constructor() {\r\n    this.data = {};\r\n    this.singleCityData = {};\r\n  }\r\n\r\n  pushItem(item) {\r\n    const ifCityExist = this.data[item.city];\r\n    if (ifCityExist) {\r\n      this.update(item);\r\n    } else {\r\n      this.data[item.city] = { ...item, updatedAt: moment().fromNow() };\r\n    }\r\n  }\r\n\r\n  update(item) {\r\n    this.data[item.city].aqi = item.aqi;\r\n    this.data[item.city].updatedAt = moment().fromNow();\r\n  }\r\n\r\n  pushCityData(item) {\r\n    if (!this.singleCityData[item.city]) {\r\n      this.singleCityData[item.city] = [{ aqi: item.aqi }];\r\n    } else {\r\n      this.singleCityData[item.city].push({ aqi: item.aqi });\r\n    }\r\n  }\r\n\r\n  getData() {\r\n    return this.data;\r\n  }\r\n\r\n  getCityData(city) {\r\n    return this.singleCityData[city];\r\n  }\r\n}\r\n\r\nexport default Data;\r\n","import { useState } from \"react\";\r\n\r\nfunction useForceUpdate() {\r\n  const [, setValue] = useState(0); // integer state\r\n  return () => setValue((value) => value + 1); // update the state to force render\r\n}\r\n\r\nexport default useForceUpdate;\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport range from \"../../config/range\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"City\",\r\n    dataIndex: \"city\",\r\n    key: \"city\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"AQI\",\r\n    dataIndex: \"aqi\",\r\n    key: \"AQI\",\r\n    sorter: (a, b) => a.aqi - b.aqi,\r\n    render(aqi) {\r\n      return {\r\n        props: {\r\n          className: range(aqi),\r\n        },\r\n        children: <div>{aqi}</div>,\r\n      };\r\n    },\r\n  },\r\n];\r\n\r\nexport default function AqiTable(props) {\r\n  const { tableData } = props;\r\n\r\n  const modifiedData = tableData.map((data, index) => ({\r\n    key: index,\r\n    city: data.city,\r\n    aqi: Number(data.aqi).toFixed(2),\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Comparison</h1>\r\n      <Table dataSource={modifiedData} columns={columns} pagination={false} />\r\n    </div>\r\n  );\r\n}\r\n\r\nAqiTable.propTypes = {\r\n  tableData: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from \"recharts\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction AQILineChart(props) {\r\n  const { cityName, data } = props;\r\n  return (\r\n    <div className=\"center mg-3\">\r\n      <h1>{cityName}</h1>\r\n      <LineChart width={1200} height={500} data={data}>\r\n        <Line type=\"monotone\" dataKey=\"aqi\" stroke=\"#8884d8\" />\r\n        <CartesianGrid stroke=\"#ccc\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n}\r\n\r\nAQILineChart.propTypes = {\r\n  cityName: PropTypes.string.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default AQILineChart;\r\n","const constants = {\r\n  WS_URL: \"wss://city-ws.herokuapp.com/\",\r\n};\r\n\r\nexport default constants;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Spin } from \"antd\";\r\n\r\nimport AQICard from \"../../component/card/card\";\r\nimport Data from \"../../config/data\";\r\nimport useForceUpdate from \"../../hooks/useForceRender\";\r\nimport AqiTable from \"../../component/aqitable/aqitable\";\r\nimport LineChart from \"../../component/chart/chart\";\r\nimport constants from \"../../config/constants\";\r\n\r\nconst data = new Data();\r\n\r\nfunction Main() {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const message = (messages) => {\r\n    messages.forEach((message) => {\r\n      data.pushItem(message);\r\n      data.pushCityData(message);\r\n      forceUpdate();\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const ws = new WebSocket(constants.WS_URL);\r\n\r\n    ws.onopen = () => {\r\n      setIsConnected(true);\r\n    };\r\n\r\n    ws.onmessage = (evt) => {\r\n      const msg = JSON.parse(evt.data);\r\n      message(msg);\r\n    };\r\n\r\n    return () => {\r\n      ws.onclose = () => {\r\n        setIsConnected(false);\r\n      };\r\n    };\r\n  }, []);\r\n\r\n  const handleCardClick = (item) => {\r\n    const isCityExist = tableData.some((data) => data.city === item.city);\r\n    if (!isCityExist) setTableData([...tableData, item]);\r\n    setCityName(item.city);\r\n  };\r\n\r\n  if (!isConnected) {\r\n    return (\r\n      <div className=\"main\">\r\n        <Spin size=\"large\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"card-wrapper\">\r\n        {Object.values(data.getData()).map((item) => {\r\n          return (\r\n            <span key={item.city} onClick={() => handleCardClick(item)}>\r\n              <AQICard {...item} />\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n      <AqiTable tableData={tableData} />\r\n      <LineChart data={data.getCityData(cityName)} cityName={cityName} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import Header from \"./view/header/header\";\nimport Main from \"./view/main/main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}